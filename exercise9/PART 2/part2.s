	.text	.global _start_start:   		LDR 	R1, =LEDR_BASE		// LEDR Port			LDR 	R8, #LIST		//R8 gets size of list		MOV 	R2, R8			// make a register that stores value of list size (first value in list)		LDR 	R8, #4			//R8 moves to first index in list		MOV 	R5, #0			// counts number of words iterated		LDR 	R9, =KEY_BASE		// R9 is the keyDISPLAY:  	STR 	R8,[R1]		//light up LEDR	LDR 	R10, [R9]	//read keys	CMP 	R10,#0		//compare, see if equals 0 or 1	BEQ 	KEYRESTART	//restart loop if key is pressed	BL 	DELAY	CMP 	R5,R2		//compare number of words iterated to total number of words	BEQ 	REVERSE_DISPLAY	ADD 	R5,#1	ADD 	R8, #4		//next word in list	B 	DISPLAYREVERSE_DISPLAY:	SUB 	R8, #4		//previous word in list	SUB 	R5,#1	STR 	R8,[R1]		//light up LEDR	LDR 	R10, [R9]		//read keys	CMP 	R10,#0		//compare, see if equals 0 or 1 depending on what means key is on	BEQ 	KEYRESTART	//restart loop if key is pressed	BL 	DELAY	CMP 	R5,R0		//compare number of words iterated to total number of words	BEQ 	DISPLAYKEYRESTART:	LDR 	R8, #LIST			//R8 gets size of list	MOV 	R2, R8			// make a register that stores value of list size (first value in list)	LDR 	R8, #4			//R8 moves to first index in list		LDR 	R10, [R9]		//read keys	CMP 	R10,#0		//compare, see if equals 0 or 1 depending on what means key is on	BEQ 	DISPLAY	BNE 	KEYRESTART	DELAY:	LDR 	R6,=50000000 		// Delay counter	SUB 	R6,#1			//-1 per iteration
	CMP		R6,#0			//when not equal to zero, repeat	BNE 	DELAY1	MOV		PC,LRLIST:	.word 	8,01,02,04,08,10,20,40,80	.end	